# 🧮 KAPSAMLI SKORLAMA ALGORİTMASI - TÜM PHASE'LER VE ENTEGRASYON

## 📋 GENEL SİSTEM MİMARİSİ

### **Skorlama Akışı:**
```
Phase 1: Gerçek Hedef (3 soru) → Gerçek İlgi Skoru
    ↓
Phase 1.5: Millî Vizyon (9 soru) → Millî Vizyon Skoru  
    ↓
Phase 2: Klasik Yetenek (14 soru) → Temel Yetenek Skoru
    ↓
Phase 3: Hibrit Strateji (3 soru) → Hibrit Uyum Skoru
    ↓
Final Entegrasyon → Önerilen Bölüm + Strateji
```

---

## 🎯 PHASE 1: GERÇEK HEDEF TESPİTİ (3 soru)

### **Puanlama Sistemi:**
Her soru A-G seçenekleri ile farklı bölümlere puan verir.

### **SORU A1: İdeal Bölüm Tercihi**
```python
secenek_puanlari = {
    'A': {'BM': 5, 'SGM': 2, 'YZVM': 3, 'EHM': 1, 'KOM': 1, 'ROSM': 2},
    'B': {'EHM': 5, 'KOM': 1, 'SGM': 1, 'YZVM': 1, 'BM': 1, 'ROSM': 1},
    'C': {'KOM': 5, 'EHM': 2, 'ROSM': 3, 'YZVM': 1, 'BM': 1, 'SGM': 1},
    'D': {'SGM': 5, 'BM': 2, 'YZVM': 1, 'EHM': 1, 'KOM': 1, 'ROSM': 1},
    'E': {'YZVM': 5, 'BM': 3, 'SGM': 2, 'ROSM': 2, 'EHM': 1, 'KOM': 1},
    'F': {'ROSM': 5, 'KOM': 3, 'YZVM': 2, 'EHM': 1, 'BM': 1, 'SGM': 1},
    'G': {'BM': 1, 'EHM': 1, 'KOM': 1, 'SGM': 1, 'YZVM': 1, 'ROSM': 1}
}
```

### **SORU A2 ve A3** 
*[Benzer puanlama matrisleri - knowledge base "GENİŞLETİLMİŞ SORU SETİ" dokümanından alınır]*

### **Gerçek Hedef Skoru Hesaplama:**
```python
def calculate_real_target_score(cevaplar):
    bolum_puanlari = {'BM': 0, 'EHM': 0, 'KOM': 0, 'SGM': 0, 'YZVM': 0, 'ROSM': 0}
    
    for i, cevap in enumerate(cevaplar):
        soru_puanlari = PHASE1_SORULAR[i][cevap]
        for bolum, puan in soru_puanlari.items():
            bolum_puanlari[bolum] += puan
    
    # Normalizasyon (0-100 arası)
    max_puan = max(bolum_puanlari.values())
    for bolum in bolum_puanlari:
        bolum_puanlari[bolum] = (bolum_puanlari[bolum] / max_puan) * 100
    
    return bolum_puanlari
```

---

## 🇹🇷 PHASE 1.5: MİLLÎ VİZYON DEĞERLENDİRMESİ (12 soru)

### **Kategori Ağırlıkları:**
- **Kategori A: Millî Sorunlara Yaklaşım** (30% ağırlık)  
- **Kategori B: Teknoloji Transferi Yaklaşımı** (30% ağırlık)
- **Kategori C: Gerçek Dünya Etki Motivasyonu** (25% ağırlık)
- **Kategori D: Jeopolitik Farkındalık ve Millî Güvenlik** (15% ağırlık)

### **Millî Vizyon Skoru Hesaplama:**
```python
def calculate_milli_vizyon_score(cevaplar):
    # Kategori puanları hesaplama (her kategori 3 soru, max 15 puan)
    kategori_A = sum(KATEGORI_A_PUANLARI[i][cevaplar[i]] for i in range(3))      # Soru 1-3
    kategori_B = sum(KATEGORI_B_PUANLARI[i][cevaplar[i+3]] for i in range(3))    # Soru 4-6
    kategori_C = sum(KATEGORI_C_PUANLARI[i][cevaplar[i+6]] for i in range(3))    # Soru 7-9
    kategori_D = sum(KATEGORI_D_PUANLARI[i][cevaplar[i+9]] for i in range(3))    # Soru 10-12 (YENİ)
    
    # Ağırlıklı toplam (güncellenmiş ağırlıklar)
    milli_vizyon_skoru = (
        (kategori_A / 15) * 0.30 +  # Max 15 puan (3 soru × 5 puan)
        (kategori_B / 15) * 0.30 +  
        (kategori_C / 15) * 0.25 +
        (kategori_D / 15) * 0.15    # YENİ KATEGORI
    ) * 100
    
    return milli_vizyon_skoru

def get_milli_vizyon_bonus(milli_vizyon_skoru):
    if milli_vizyon_skoru >= 85:
        return 0.15, "Vatansever Teknoloji Lideri"
    elif milli_vizyon_skoru >= 70:
        return 0.10, "Bilinçli Teknoloji Uzmanı"
    elif milli_vizyon_skoru >= 55:
        return 0.05, "Potansiyel Sosyal Etki"
    else:
        return 0.00, "Bireysel Odaklı Kariyer"
```

### **Kategori D: Jeopolitik Farkındalık Puanlama Matrisleri:**

#### **SORU D1: Savaş Riski ve Teknoloji Önceliği**
```python
D1_PUANLARI = {
    'A': {'EHM': 5, 'KOM': 4, 'SGM': 5, 'YZVM': 3, 'BM': 3, 'ROSM': 5},
    'B': {'EHM': 2, 'KOM': 3, 'SGM': 2, 'YZVM': 4, 'BM': 4, 'ROSM': 2},
    'C': {'EHM': 4, 'KOM': 5, 'SGM': 4, 'YZVM': 5, 'BM': 4, 'ROSM': 4},
    'D': {'EHM': 1, 'KOM': 1, 'SGM': 1, 'YZVM': 1, 'BM': 1, 'ROSM': 1},
    'E': {'EHM': 1, 'KOM': 1, 'SGM': 1, 'YZVM': 1, 'BM': 1, 'ROSM': 1}
}
```

#### **SORU D2: Savunma-Sivil Entegrasyonu Aciliyeti**
```python
D2_PUANLARI = {
    'A': {'EHM': 5, 'KOM': 5, 'SGM': 3, 'YZVM': 4, 'BM': 4, 'ROSM': 5},
    'B': {'EHM': 4, 'KOM': 3, 'SGM': 4, 'YZVM': 3, 'BM': 3, 'ROSM': 3},
    'C': {'EHM': 2, 'KOM': 2, 'SGM': 3, 'YZVM': 2, 'BM': 2, 'ROSM': 2},
    'D': {'EHM': 1, 'KOM': 2, 'SGM': 5, 'YZVM': 2, 'BM': 2, 'ROSM': 1},
    'E': {'EHM': 1, 'KOM': 1, 'SGM': 1, 'YZVM': 1, 'BM': 1, 'ROSM': 1}
}
```

#### **SORU D3: Millî Güvenlik Katkı Motivasyonu**
```python
D3_PUANLARI = {
    'A': {'EHM': 4, 'KOM': 3, 'SGM': 5, 'YZVM': 2, 'BM': 2, 'ROSM': 4},
    'B': {'EHM': 5, 'KOM': 5, 'SGM': 4, 'YZVM': 4, 'BM': 4, 'ROSM': 5},
    'C': {'EHM': 2, 'KOM': 2, 'SGM': 2, 'YZVM': 3, 'BM': 3, 'ROSM': 2},
    'D': {'EHM': 3, 'KOM': 3, 'SGM': 3, 'YZVM': 4, 'BM': 3, 'ROSM': 3},
    'E': {'EHM': 2, 'KOM': 2, 'SGM': 2, 'YZVM': 2, 'BM': 2, 'ROSM': 2}
}
```

---

## 📊 PHASE 2: KLASİK YETENEk ANALİZİ (14 soru)

### **Dinamik Soru Seçimi:**
Phase 1 sonucuna göre 17 sorudan 14'ü seçilir.

```python
def select_phase2_questions(gercek_hedef_bolum, milli_vizyon_profili):
    soru_havuzu = {
        'matematik': [1.1, 1.2, 1.3, 1.4],
        'pratik_ilgi': [2.1, 2.2, 2.3],
        'kariyer': [3.1, 3.2, 3.3, 3.4],
        'fizik_teknik': [4.1, 4.2],
        'stres': [5.1, 5.2],
        'risk': [6.1, 6.2]
    }
    
    # Millî vizyon profiline göre ek soru seçimi
    if milli_vizyon_profili.get('jeopolitik_farkindalik', 0) > 70:
        # Jeopolitik farkındalığı yüksek öğrenciler için güvenlik odaklı sorular
        if gercek_hedef_bolum in ['EHM', 'SGM', 'ROSM']:
            return savunma_odakli_secim()
    
    if gercek_hedef_bolum == 'BM':
        return matematik_odakli_secim()
    elif gercek_hedef_bolum == 'EHM':
        return fizik_matematik_odakli_secim()
    elif gercek_hedef_bolum == 'SGM':
        return guvenlik_analitik_odakli_secim()
    # ... diğer bölümler
```

### **Temel Skorlama Sistemi:**
```python
def calculate_basic_aptitude_score(cevaplar):
    # Mevcut knowledge base'deki skorlama sistemi
    ham_puanlar = {}
    
    for bolum in ['EHM', 'KOM', 'SGM']:
        ham_puan = sum(SORU_PUANLARI[i][cevaplar[i]][bolum] for i in range(14))
        
        # Yüzde dönüşümü
        if bolum == 'EHM':
            yuzde = ((ham_puan - 18) / 32) * 100
        elif bolum == 'KOM':
            yuzde = ((ham_puan - 16) / 36) * 100
        elif bolum == 'SGM':
            yuzde = ((ham_puan - 18) / 36) * 100
            
        ham_puanlar[bolum] = max(0, min(100, yuzde))
    
    return ham_puanlar
```

### **YKS Profil Bonusu:**
```python
def apply_yks_bonus(skorlar, yks_profil):
    bonus_katsayilari = {
        'EHM': 1.15,  # Güçlü matematik+fizik için büyük avantaj
        'KOM': 1.05,  # Orta düzey avantaj
        'SGM': 1.10   # Analitik düşünce için avantaj
    }
    
    for bolum in skorlar:
        skorlar[bolum] *= bonus_katsayilari.get(bolum, 1.0)
        skorlar[bolum] = min(100, skorlar[bolum])  # 100'ü geçmesin
    
    return skorlar
```

---

## 🔄 PHASE 3: HİBRİT STRATEJİ DEĞERLENDİRMESİ (3 soru)

### **Hibrit Skor Hesaplama:**
```python
def calculate_hybrid_strategy_score(gercek_hedef, en_yuksek_mevcut, phase3_cevaplar):
    if gercek_hedef == en_yuksek_mevcut:
        return None  # Hibrit strateji gerekmez
    
    # Benzerlik oranları (Knowledge Base'den)
    benzerlik_matrisi = {
        ('BM', 'SGM'): 0.85, ('BM', 'YZVM'): 0.75, ('EHM', 'KOM'): 0.60,
        ('SGM', 'YZVM'): 0.55, ('KOM', 'ROSM'): 0.55, ('EHM', 'SGM'): 0.45
        # ... diğer kombinasyonlar
    }
    
    benzerlik_orani = benzerlik_matrisi.get((en_yuksek_mevcut, gercek_hedef), 0.3)
    
    # Geçiş kolaylığı
    gecis_kolayligi = {
        ('BM', 'SGM'): 0.90, ('BM', 'YZVM'): 0.80, ('EHM', 'KOM'): 0.65
        # ... diğer kombinasyonlar
    }
    
    gecis_orani = gecis_kolayligi.get((en_yuksek_mevcut, gercek_hedef), 0.4)
    
    # Kariyer avantajı
    kariyer_avantaji = {
        ('BM', 'SGM'): 0.50,  # DevSecOps %50 maaş artışı
        ('SGM', 'YZVM'): 0.60,  # AI Security %60 maaş artışı
        # ... diğer kombinasyonlar
    }
    
    kariyer_bonus = kariyer_avantaji.get((en_yuksek_mevcut, gercek_hedef), 0.2)
    
    # Phase 3 esneklik bonusu
    esneklik_bonusu = calculate_flexibility_bonus(phase3_cevaplar)
    
    # Final hibrit skor
    hibrit_skor = (
        gercek_hedef_skoru * 0.4 +
        benzerlik_orani * 30 +  # 0.3 → 30 puan
        gecis_orani * 20 +      # 0.2 → 20 puan  
        kariyer_bonus * 10 +    # 0.1 → 10 puan
        esneklik_bonusu
    )
    
    return hibrit_skor

def calculate_flexibility_bonus(cevaplar):
    # C1: Esneklik testi, C2: Yatay geçiş, C3: Hibrit kariyer
    bonus = 0
    if cevaplar[0] == 'A': bonus += 4  # Esneklik kabul
    if cevaplar[1] == 'A': bonus += 4  # Yatay geçiş planı
    if cevaplar[2] == 'A': bonus += 2  # Hibrit kariyer ilgisi
    return bonus
```

---

## 🎯 FİNAL ENTEGRASYON VE KARAR MATRİSİ

### **Kalibre Edilmiş Karar Algoritması:**
```python
def final_decision_algorithm(gercek_hedef_skorlari, temel_yetenek_skorlari, 
                           milli_vizyon_skoru, hibrit_skor=None):
    
    # En yüksek skorlar
    en_yuksek_gercek = max(gercek_hedef_skorlari, key=gercek_hedef_skorlari.get)
    en_yuksek_temel = max(temel_yetenek_skorlari, key=temel_yetenek_skorlari.get)
    
    # Millî vizyon bonusu
    mv_bonus_oran, mv_seviye = get_milli_vizyon_bonus(milli_vizyon_skoru)
    
    # Final skorları hesaplama
    final_skorlari = {}
    for bolum in ['EHM', 'KOM', 'SGM']:  # Ana 3 bölüm
        temel_skor = temel_yetenek_skorlari.get(bolum, 0)
        final_skor = temel_skor * (1 + mv_bonus_oran)
        final_skorlari[bolum] = min(100, final_skor)
    
    # Karar matrisi
    en_yuksek_final = max(final_skorlari, key=final_skorlari.get)
    en_yuksek_final_skor = final_skorlari[en_yuksek_final]
    
    # Hibrit strateji değerlendirmesi
    if hibrit_skor is not None:
        if hibrit_skor >= 90:
            return "NET_HIBRIT_STRATEJI", en_yuksek_temel, en_yuksek_gercek, hibrit_skor
        elif hibrit_skor >= 85:
            return "KOSULLU_HIBRIT", en_yuksek_temel, en_yuksek_gercek, hibrit_skor
        elif hibrit_skor >= 75 and en_yuksek_final_skor >= 75:
            return "HIBRIT_VS_DIREKT", en_yuksek_temel, en_yuksek_gercek, hibrit_skor
        elif hibrit_skor >= 75:
            return "HIBRIT_STRATEJI", en_yuksek_temel, en_yuksek_gercek, hibrit_skor
    
    # Direkt bölüm kararları
    if en_yuksek_final_skor >= 85:
        ikinci_en_yuksek = sorted(final_skorlari.values(), reverse=True)[1]
        fark = en_yuksek_final_skor - ikinci_en_yuksek
        if fark >= 15:
            return "NET_KARAR", en_yuksek_final, en_yuksek_final_skor, fark
        else:
            return "GUCLU_EGILIM", en_yuksek_final, en_yuksek_final_skor, fark
    elif en_yuksek_final_skor >= 65:
        return "ORTA_UYUM", en_yuksek_final, en_yuksek_final_skor, 0
    else:
        return "DUSUK_UYUM", None, en_yuksek_final_skor, 0
```

### **Kapsamlı Sonuç Raporu Formatı:**
```python
def generate_comprehensive_report(karar_tipi, bolum1, bolum2, skorlar, mv_skor, mv_seviye):
    rapor = {
        "karar_tipi": karar_tipi,
        "onerileri": {
            "birincil": bolum1,
            "alternatif": bolum2 if karar_tipi.startswith("HIBRIT") else None
        },
        "skorlar": {
            "temel_yetenek": skorlar,
            "milli_vizyon": {
                "toplam_skor": mv_skor,
                "seviye": mv_seviye,
                "kategorik_detay": {
                    "milli_sorunlar": kategori_A_skor,
                    "teknoloji_transferi": kategori_B_skor,
                    "sosyal_etki": kategori_C_skor,
                    "jeopolitik_farkindalik": kategori_D_skor  # YENİ
                }
            }
        },
        "detayli_analiz": generate_detailed_analysis(karar_tipi, bolum1, bolum2),
        "aksiyon_plani": generate_action_plan(karar_tipi, bolum1, bolum2),
        "milli_guvenlik_katki": generate_security_contribution_analysis(bolum1, kategori_D_skor)  # YENİ
    }
    return rapor

def generate_security_contribution_analysis(bolum, jeopolitik_skor):
    """Jeopolitik farkındalık skoruna göre millî güvenlik katkı analizi"""
    if jeopolitik_skor >= 12:  # Yüksek farkındalık (15 üzerinden 12+)
        return f"{bolum} alanında dual-use teknoloji geliştirme potansiyeli yüksek"
    elif jeopolitik_skor >= 8:  # Orta farkındalık
        return f"{bolum} alanında savunma-sivil teknoloji transfer fırsatları mevcut"
    else:
        return f"{bolum} alanında sivil odaklı katkı, güvenlik farkındalığı geliştirilebilir"
```

---

## 📊 HATA AYIKLAMA VE KALİTE KONTROL

### **Skorlama Doğrulama:**
```python
def validate_scoring_system():
    # Tüm skorların 0-100 arasında olduğunu kontrol et
    # Bonus katsayılarının mantıklı olduğunu kontrol et  
    # Hibrit skorların benzerlik oranlarıyla uyumlu olduğunu kontrol et
    pass

def debug_scoring_process(all_answers):
    # Her phase'in skorlarını adım adım göster
    # Hangi soruların hangi bölümlere nasıl puan verdiğini izle
    # Final kararın hangi faktörlere dayandığını raporla
    pass
```

### **Test Senaryoları:**
```python
test_scenarios = {
    "yuksek_mv_dusuk_teknik": {
        "beklenen": "motivasyon artırıcı öneriler",
        "test_cevaplari": [...]
    },
    "dusuk_mv_yuksek_teknik": {
        "beklenen": "toplumsal katkı vurgusu",
        "test_cevaplari": [...]
    },
    "hibrit_gerekli": {
        "beklenen": "hibrit strateji önerisi",
        "test_cevaplari": [...]
    },
    "yuksek_jeopolitik_farkindalik": {  # YENİ
        "beklenen": "savunma-sivil dual-use teknoloji odaklı kariyer önerisi",
        "test_cevaplari": [
            # Phase 1: BM hedefi ama SGM'ye girebiliyor
            # Phase 1.5: Yüksek savaş riski farkındalığı + dual-use teknoloji ilgisi
            # Beklenen: BM→SGM hibrit strateji + millî güvenlik katkı vurgusu
        ]
    },
    "dusuk_jeopolitik_farkindalik": {  # YENİ
        "beklenen": "sivil odaklı motivasyon artırıcı yaklaşım",
        "test_cevaplari": [
            # Jeopolitik farkındalık düşük ama teknik yetenek yüksek
            # Beklenen: Sivil teknoloji odaklı kariyer + güvenlik farkındalığı geliştirme önerisi
        ]
    }
}
```

---

## 🎯 KULLANIM REHBERİ

### **Sistem Entegrasyonu:**
1. **Bu doküman tek referans** olarak kullanılır
2. **Diğer skorlama dokümanları silinir** veya arşive alınır
3. **Sistem promptu bu dokümanı referans alır**
4. **Tüm hesaplamalar bu algoritmalarla yapılır**

### **Güncelleme Prosedürü:**
- **Yeni soru eklendiğinde** → Sadece bu doküman güncellenir
- **Hibrit strateji değiştiğinde** → Benzerlik matrisi burada güncellenir  
- **Bonus sistem değiştiğinde** → Katsayılar burada düzeltilir

### **Performans İzleme:**
- **Karar doğruluğu** → Öğrenci memnuniyeti ile ölçülür
- **Skorlama tutarlılığı** → Aynı profilde benzer sonuçlar
- **Hibrit başarı oranı** → Hibrit önerilerinin gerçekleşme oranı

**Bu kapsamlı skorlama sistemi, tüm phase'leri tek çatı altında birleştirerek tutarlı ve güvenilir sonuçlar garanti eder.**
